1.	I hosted a web server with HTTP through python’s HTTP class. It was easy to create a server, which I did through the command line, but I had a lot of trouble figuring out how to actually send packets to the local server that I was hosting. As a result, I eventually created a python program that created the web server for me and sent pings repeatedly to the site saying “Hello”. I had some help from chatGPT for the specifics, as I was having trouble importing a few libraries, and asked it to rewrite some of my code so that it would work without them. 
2.	HTTP is not secure because it does not include any encryption or guarding methods against eavesdroppers intercepting the data. If any bad actors were on the same network as the web server, which is true in our case, they can access the plaintext transmission and see the entire message. HTTP also doesn’t verify the source or destination websites, meaning that eavesdroppers could pose as the destination servers, intercept all data, and not have to provide any information confirming their identity as the rightful receivers.
a.	Wireshark was actually not that hard to figure out for me, the hard part was figuring out how to actually send web packets between myself and the server as I mentioned above.
3.	My local web server is hosted on my own network, and has no root verifications or trust beyond what I have given it. I am the highest authority that can give my own network a certificate of trust, and since I am not a certificate authority, that is the extent of my network’s trust. 
a.	HTTPS is much more heavily encrypted than HTTP. While I still recovered the packet traces, the contents of the key were basically unreadable, being completely unable to recover any data that would be of any use to me. At the very least, not like HTTP.
